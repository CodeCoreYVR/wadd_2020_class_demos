.app-container > .items {
  background-color: grey;
  width: 10em;
  height: 4em;
}

.app-container > .items:nth-child(even) {
  height: 8em;
}

.app-container {
  /* 
        This defines a flex container; inline or block depending on the 
        given value. It enables a flex context for all its direct children
    */
  display: flex;

  /* 
    This establishes the main-axis
    flex-direction: row | row-reverse | column | column-reverse;
    row is the default one => left to right in ltr; 
    row-reverse => right to left horizontally (rtl)
    column: same as row but top bottom
    colum-reverse: same as row-reverse but, bottom to top
  */
  flex-direction: row;

  /* 
    flex-wrap: nowrap | wrap | wrap-reverse;
    wrap: flex items will wrap onto multiple lines, from top to bottom.
    wrap: reverse: flex items will wrap onto multiple lines from bottom to top
  */
  flex-wrap: wrap;

  /* shorthand for flex-direction & flex-wrap */
  /* flex-flow: <flex-direction> || <flex-wrap> */

  /* Justify Content */
  /* This defines the alignment along the main axis */
  /* justify-content: flex-start | flex-end | center | space-around | space-evenly | start | end | left | right .... + safe */
  /* 
    flex-start: (default): items are packed toward the start of the flex-direction
    flex-end: items are packed toward the end of the flex-direction. 
    start: items are packed toward the start of the writing-mode direction.
    end: items are packed toward the end of the writting-mode direction.
    left: items are packed toward left edge of the container, unless that doesn't make sense with the flex-direction, then it behaves like start.
    right: items are packed toward right edge of the container, unles that doesn't make sense with the flex-direction, then it behaves like start.
    center: items are packed centered along the line.
    space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line
    space-around: items are evenly distributed in the line with equal space around them. Note that visually the spaces aren't equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.
    space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal
  */
  justify-content: space-evenly;

  /* Align Items */
  /* align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end .... safe | unsafe */

  /* 
    stretch: (default) stretch to fill the container ( still respect min-width/max-width)
    flex-start / start / self-start: items are places at the start of the cross-axis. The difference between these is subtle, and is about respecting the flex-direction rules of the writing mode rules.
    flex-end / end / self-end: items are placed at the end of the cross-axis, The difference again is subtle and is about respecting flex-direction rules vs. writing mode rules.

    center:  items are centered in the cross-axis
    baseline: items are aligned such as their baselines align
  */

  align-items: center;

  /* Align Content */
  /* Similar to justify content but, we need to have more than one row to see the effect */
  /* align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline | + .... safe | unsafe 
  
  flex-start / start: items packed to the start of the container. The ( more supported) flex-start honors the flex-direction while start honors the writing mode direction.

  flex-end / end: items packed to the end of the container. The ( more support) flex-end honors the flex-direction while end honors the writing mode direction

  center: items centered in the container
  space-between: items evenly distributed; the first line is at the start of the container while the last one is at the end
  space-around: items evenly distributed with equal space around each line
  space-evenly: items are evenly distributed with equal space around them
  stretch: (default) lines stretch to take up the remaining space
  */

  /* flex-direction: column;
  align-content: space-around; */
}

.app-container > .items:last-child {
  background-color: green;
  align-self: flex-end;
}

.app-container > .items:first-child {
  background-color: maroon;
  align-self: flex-start;
}
